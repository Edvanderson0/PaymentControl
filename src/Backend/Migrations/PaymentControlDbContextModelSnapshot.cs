// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentControl.Infraestructure.Data;

#nullable disable

namespace PaymentControl.Migrations
{
    [DbContext(typeof(PaymentControlDbContext))]
    partial class PaymentControlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PaymentControl.Entities.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberTelephone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PaymentControl.Entities.PaymentReceived", b =>
                {
                    b.Property<DateOnly>("DataPayment")
                        .HasColumnType("date");

                    b.Property<int>("ServiceIdId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasIndex("ServiceIdId");

                    b.ToTable("PaymentsReceived");
                });

            modelBuilder.Entity("PaymentControl.Entities.ServiceEntrance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("EntranceDate")
                        .HasColumnType("date");

                    b.Property<int>("IdClientsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double");

                    b.Property<double>("UnitValue")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdClientsId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PaymentControl.Entities.ServiceExit", b =>
                {
                    b.Property<DateOnly>("ExitDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.Property<int>("ServiceIdId")
                        .HasColumnType("int");

                    b.HasIndex("ServiceIdId");

                    b.ToTable("ServiceOutputs");
                });

            modelBuilder.Entity("PaymentControl.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PaymentControl.Entities.PaymentReceived", b =>
                {
                    b.HasOne("PaymentControl.Entities.ServiceEntrance", "ServiceId")
                        .WithMany()
                        .HasForeignKey("ServiceIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceId");
                });

            modelBuilder.Entity("PaymentControl.Entities.ServiceEntrance", b =>
                {
                    b.HasOne("PaymentControl.Entities.Clients", "IdClients")
                        .WithMany()
                        .HasForeignKey("IdClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdClients");
                });

            modelBuilder.Entity("PaymentControl.Entities.ServiceExit", b =>
                {
                    b.HasOne("PaymentControl.Entities.ServiceEntrance", "ServiceId")
                        .WithMany()
                        .HasForeignKey("ServiceIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
